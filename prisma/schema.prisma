// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String      @id @default(uuid())
  userName              String
  name                  String?
  email                 String      @unique
  password              String?
  currentKnowledge      String?
  codingAmbitions       String[]
  isOnboardingCompleted Boolean     @default(false)
  preferredSkills       String[]
  contents              Content[]
  likedContents         Content[]   @relation("ContentLikes")
  likes                 Like[]
  bio                   String?
  avatarImg             String?
  createdAt             DateTime    @default(now())
  instagramName         String?
  instagramLink         String?
  linkedinName          String?
  linkedinLink          String?
  twitterName           String?
  twitterLink           String?
  followers             Followers[] @relation("following")
  following             Followers[] @relation("follower")
  comments              Comment[]
  likedComments         Comment[]   @relation("CommentLikes")
  ownedGroups           Group[]     @relation("GroupAuthor")
  joinGroupUsers        GroupUser[]
}

model Followers {
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Content {
  id             String          @id @default(uuid())
  type           EContentType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  author         User            @relation(fields: [authorId], references: [id])
  authorId       String
  likedBy        User[]          @relation("ContentLikes")
  likes          Like[]
  title          String
  description    String
  coverImage     String?
  meetupLocation MeetupLocation?
  meetupDate     DateTime?
  podcastFile    String?
  podcastTitle   String?
  tags           Tag[]
  comments       Comment[]
  viewsCount     Int?            @default(0)
  likesCount     Int?            @default(0)
  commentsCount  Int?            @default(0)
  group          Group?          @relation(fields: [groupId], references: [id])
  groupId        String?
}

model MeetupLocation {
  id        String   @id @default(uuid())
  address   String
  lat       Float
  lng       Float
  content   Content? @relation(fields: [contentId], references: [id])
  contentId String?  @unique
}

model Like {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  content   Content @relation(fields: [contentId], references: [id])
  contentId String

  @@id([userId, contentId])
}

model Tag {
  id       String    @id @default(uuid())
  title    String    @unique
  contents Content[]
}

model Comment {
  id           String    @id @default(uuid())
  text         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  contentId    String
  content      Content   @relation(fields: [contentId], references: [id])
  likes        User[]    @relation("CommentLikes")
  replyingTo   Comment?  @relation("replyingTo", fields: [replyingToId], references: [id])
  replyingToId String?
  replies      Comment[] @relation("replyingTo")
}

model Group {
  id           String      @id @default(uuid())
  name         String
  profileImage String?
  coverImage   String?
  bio          String
  contents     Content[]
  author       User        @relation("GroupAuthor", fields: [authorId], references: [id])
  authorId     String
  members      GroupUser[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
}

model GroupUser {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
  role    Role   @default(USER)

  @@id([userId, groupId])
}

enum Role {
  USER
  ADMIN
}

enum EContentType {
  POST
  MEETUP
  PODCAST
}
