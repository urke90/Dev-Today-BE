// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String      @id @default(uuid())
  userName              String
  name                  String?
  email                 String      @unique
  password              String?
  currentKnowledge      String?
  codingAmbitions       String[]
  isOnboardingCompleted Boolean?
  preferredSkills       String[]
  contents              Content[]
  likedContents         Content[]   @relation("ContentLikes")
  likes                 Like[]
  bio                   String?
  avatarImg             String?
  createdAt             DateTime    @default(now())
  instagramName         String?
  instagramLink         String?
  linkedinName          String?
  linkedinLink          String?
  twitterName           String?
  twitterLink           String?
  followers             Followers[] @relation("follower")
  following             Followers[] @relation("following")
  comments             Comment[]
  likedComments        Comment[] @relation("CommentLikes")
  groups               Group[]
  adminGroups          Admin[]
  memberGroups         Member[]
  role                  Role        @default(USER)
}

model Followers {
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

// Followers ?
// Following ?
// Social Media  ? nova tabela?

model Content {
  id        String       @id @default(uuid())
  type      EContentType?
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String
  likedBy   User[]       @relation("ContentLikes")
  likes     Like[]
  title     String?
  contentDescription   String?
  postGroups String[]
  coverImage     String?
  meetUpLocationImage    String?
  meetUpDate     DateTime?
  podcastAudioFile   String?
  podcastAudiTitle   String?
  storyTags String[]
  comments Comment[]
  contentGroups ContentGroup[]
  viewsCount Int? @default(0)
  likesCount Int? @default(0)
  commentsCount Int? @default(0)
}
model Like  {
  user User @relation(fields: [userId], references: [id])
  userId String
  content Content @relation(fields: [contentId], references: [id])
  contentId String
 
  @@id([userId, contentId])
}

enum EContentType {
  posts
  meetups
  podcasts
}

model  Comment {
id       String   @id @default(uuid())
commentText  String
createdAt DateTime @default(now())
updatedAt DateTime? @updatedAt
author User @relation(fields: [authorId], references: [id])
authorId String
contentId String
content Content @relation(fields: [contentId], references: [id])
likes User[] @relation("CommentLikes")
}

model Group {
  id        String   @id @default(uuid())
  type      EContentType?
  name      String
  coverImg  String?
  groupBio  String?
  admins  Admin[]
  members  Member[]
  users    User[]
  contentGroups ContentGroup[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}
 
 model ContentGroup {
  contentId String
  content Content @relation(fields: [contentId], references: [id])
  groupId String
  group Group @relation(fields: [groupId], references: [id])
  @@id([contentId, groupId])
}
model Admin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
}

model Member {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
}

enum Role {
  USER
  ADMIN
}
