// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               String      @id @default(uuid())
  userName         String
  name             String?
  email            String      @unique
  password         String?
  currentKnowledge String?
  codingAmbitions  String?
  isOnboarding     Boolean?
  preferredSkills  String[]
  contents         Content[]
  likedContents    Content[]   @relation("ContentLikes")
  bio              String?
  avatarImg        String?
  createdAt        DateTime    @default(now())
  instagramName    String?
  instagramLink    String?
  linkedinName     String?
  linkedinLink     String?
  twitterName      String?
  twitterLink      String?
  followers        Followers[] @relation("follower")
  following        Followers[] @relation("following")
}

model Followers {
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

// Followers ?
// Following ?
// Social Media  ? nova tabela?

model Content {
  id        String       @id @default(uuid())
  type      EContentType
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String
  likedBy   User[]       @relation("ContentLikes")
}

enum EContentType {
  POST
  MEETUP
  PODCAST
}
